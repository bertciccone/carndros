ROS CHEAT SHEET

After completing installation of your virtual machine in Introduction to ROS, Lesson 22.

Starting VirtualBox:
- open VirtualBox app
- double click vm


Getting started:
- login (udacity-nd)
- double click Terminator console or click ctrl-option-t on Mac, ctrl-alt-t on PC


ROS CHEAT SHEET FILES
Downloading files from github:
cd ~
git clone https://github.com/bertciccone/carndros.git


MAKING THE VIRTUAL MACHINE SCREEN LARGER (VERIFIED ON MACOS)

Follow these instructions to install Guest Additions to make your virtual machine screen larger and enable other convenience features.

(Instructions from https://askubuntu.com/questions/792832/how-to-install-virtualbox-guest-additions-for-ubuntu-16-04/957118#957118)

In Terminator (ctrl-T) after starting the virtual machine:

wget https://www.virtualbox.org/download/testcase/VBoxGuestAdditions_5.2.7-120326.iso

Then create an empty directory in /media and mount it there:

sudo mkdir /media/iso

sudo mount VBoxGuestAdditions_5.1.28.iso /media/iso

Then go there and run the Linux installer:

cd /media/iso

sudo ./VBoxLinuxAdditions.run

Reboot your guest OS:

reboot


ENABLING COPY/PASTE FROM HOST TO GUEST (VM)

(After performing the steps above to install Guest Additions.)

In VirtualBox Machine/Settings/General/Advanced menu:

Click Shared Clipboard: Bidirectional
Drag n Drop: Bidirectional

(Use ctrl-c/ctrl-v in the Guest VM window, use cmd-c/cmd-v in the Mac Host.)


TURTLESIM

In Terminator window 1:
roscore


In Terminator window 2:
rosrun turtlesim turtlesim_node


In Terminator window 3:
rosrun turtlesim turtle_teleop_key

Command tab completion:
rosrun turtlesim turtle<tab><tab>

Drive turtle:
(use arrow keys)

To list nodes:
rosnode list

To list topics:
rostopic list

To get topic info:
rostopic info /turtle1/cmd_vel

To clear the screen:
clear

To get message info:
rosmsg show geometry_msgs/Twist

To see message definition using the nano editor:
rosed geometry_msgs Twist.msg

To exit nano editor:
<ctrl-x>

To echo messages:
In Terminator window 4:
rostopic echo /turtle1/cmd_vel


CATKIN WORKSPACE FIRST-TIME SETUP

In a Terminator window:
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_init_workspace
ls -l
cd ~/catkin_ws
catkin_make
ls
(see build devel src)


CATKIN WORKSPACE COMMANDS

(Example: simple_arm)

Clone a package:
cd ~/catkin_ws/src
git clone https://github.com/udacity/simple_arm_01.git simple_arm

Build a package:
cd ~/catkin_ws
catkin_make

Install a missing package:
sudo apt-get install ros-kinetic-controller-manager
(enter student password)
catkin_make

Running many ROS nodes, set parameters, re-spawn dead processes:
cd ~/catkin_ws
catkin_make
source devel/setup.bash
roslaunch simple_arm robot_spawn.launch

Kill a process in Terminator:
<ctrl-c>

Check for missing dependencies:
rosdep check simple_arm

Install missing dependencies:
rosdep install -i simple_arm

Creating a ROS package:
cd ~/catkin_ws/src
catkin_create_pkg <your_package_name> [dependency1 dependency2 ...]

Create first package:
(Example: first_package)
catkin_create_pkg first_package
ls
(see first_package)
ls first_package
(see CMakeLists.txt package.xml)


IMPLEMENTING A ROS NODE

Adding the scripts directory:
cd ~/catkin_ws/src/simple_arm/
mkdir scripts

Creating a new script:
cd scripts
echo '#!/bin/bash' >> hello
echo 'echo Hello World' >> hello

Set execution permissions:
chmod u+x hello
cd ~/catkin_ws
catkin_make
source devel/setup.bash
rosrun simple_arm hello

Running simple_mover:
cd ~/catkin_ws
roslaunch simple_arm robot_spawn.launch

In another Terminator window:
cd ~/catkin_ws
source devel/setup.bash
rosrun simple_arm simple_mover


IMPLEMENTING A SERVICE

Creating a new service definition:
cd ~/catkin_ws/src/simple_arm/
mkdir srv
cd srv
touch GoToPosition.srv
nano GoToPosition.srv
(Enter example contents of GoToPosition.srv)

float64 joint_1
float64 joint_2
---
duration time_elapsed

Modifying CMakeLists.txt:
cd ~/catkin_ws/src/simple_arm
nano CMakeLists.txt
(Ensure std_msgs and message_generation are listed as required packages.)

find_package(catkin REQUIRED COMPONENTS
        std_msgs
        message_generation
)

(Uncomment add_service_files() macro to look like this)

Next, uncomment the commented-out add_service_files() macro so it looks like this:

## Generate services in the 'srv' folder
add_service_files(
   FILES
   GoToPosition.srv
)

Lastly, make sure that the generate_messages() macro is uncommented, as follows:

generate_messages(
   DEPENDENCIES
   std_msgs  # Or other packages containing msgs
)

Modifying package.xml:
cd ~/catkin_ws/src/simple_arm
nano package.xml

(Add the missing lines; it should look like the following.)

  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>message_generation</build_depend>

  <run_depend>controller_manager</run_depend>
  <run_depend>effort_controllers</run_depend>
  <run_depend>gazebo_plugins</run_depend>
  <run_depend>gazebo_ros</run_depend>
  <run_depend>gazebo_ros_control</run_depend>
  <run_depend>joint_state_controller</run_depend>
  <run_depend>joint_state_publisher</run_depend>
  <run_depend>robot_state_publisher</run_depend>
  <run_depend>message_runtime</run_depend>
  <run_depend>xacro</run_depend>

Building the package:
cd ~/catkin_ws
catkin_make
cd devel/lib/python2.7/dist-packages
ls
env | grep PYTHONPATH
(IS THIS RIGHT?)

Creating the empty arm_mover node script:
cd ~/catkin_ws
cd src/simple_arm/scripts
touch arm_mover
chmod u+x arm_mover

Launching the project with the new service:
cd ~/catkin_ws/src/simple_arm/launch
nano robot_spawn.launch

(Modify robot_spawn.launch by adding this section.)

  <!-- The arm mover node -->
  <node name="arm_mover" type="arm_mover" pkg="simple_arm">
    <rosparam>
      min_joint_1_angle: 0
      max_joint_1_angle: 1.57
      min_joint_2_angle: 0
      max_joint_2_angle: 1.0
    </rosparam>
  </node>

Testing the new service:
(Close all previous Terminator windows first.)
In Terminator window 1:
cd ~/catkin_ws
catkin_make
source devel/setup.bash
roslaunch simple_arm robot_spawn.launch

Verify that the node and service have indeed been launched:
In Terminator window 2:
rosnode list
rosservice list

Assuming that both the service (/arm_mover/safe_move) and the node (/arm_mover) show up as expected (If they've not, check the logs in the roscore console), you can now interact with the service using rosservice.

Display the camera image stream:
rqt_image_view /rgb_camera/image_raw
(See open window with gray screen.)

Rotate joint 1 and joint 2 by approx. pi/2 radians (needs to be on two lines apparently):
rosservice call /arm_mover/safe_move "joint_1: 1.57
joint_2: 1.57"

(error expected)

Set the max_joint_2_angle parameter on the parameter server:
rosparam set /arm_mover/max_joint_2_angle 1.57

Try again (success, see the arm move and see the new view in the camera window):
rosservice call /arm_mover/safe_move "joint_1: 1.57
joint_2: 1.57"


